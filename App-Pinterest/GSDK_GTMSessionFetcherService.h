//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "GTMSessionFetcherServiceProtocol.h"

@class GSDK_GTMSessionFetcherSessionDelegateDispatcher, NSArray, NSDictionary, NSHTTPCookieStorage, NSMutableArray, NSMutableDictionary, NSObject<OS_dispatch_queue>, NSOperationQueue, NSString, NSURLCredential, NSURLSessionConfiguration;

@interface GSDK_GTMSessionFetcherService : NSObject <GTMSessionFetcherServiceProtocol>
{
    NSMutableDictionary *_delayedFetchersByHost;
    NSMutableDictionary *_runningFetchersByHost;
    unsigned int _maxRunningFetchersPerHost;
    GSDK_GTMSessionFetcherSessionDelegateDispatcher *_delegateDispatcher;
    NSObject<OS_dispatch_queue> *_callbackQueue;
    NSHTTPCookieStorage *_cookieStorage;
    NSString *_userAgent;
    double _timeout;
    NSURLCredential *_credential;
    NSURLCredential *_proxyCredential;
    int _cookieStorageMethod;
    id <GTMFetcherAuthorizationProtocol> _authorizer;
    NSMutableArray *_stoppedFetchersToWaitFor;
    BOOL _allowLocalhostRequest;
    BOOL _allowInvalidServerCertificates;
    BOOL _retryEnabled;
    NSURLSessionConfiguration *_configuration;
    CDUnknownBlockType _configurationBlock;
    NSArray *_allowedInsecureSchemes;
    CDUnknownBlockType _retryBlock;
    NSDictionary *_properties;
    CDUnknownBlockType _testBlock;
    double _maxRetryInterval;
    double _minRetryInterval;
    double _unusedSessionTimeout;
}

+ (unsigned int)numberOfNonBackgroundSessionFetchers:(id)arg1;
+ (id)mockFetcherServiceWithFakedData:(id)arg1 fakedError:(id)arg2;
@property(copy) CDUnknownBlockType testBlock; // @synthesize testBlock=_testBlock;
@property(copy) NSDictionary *properties; // @synthesize properties=_properties;
@property double minRetryInterval; // @synthesize minRetryInterval=_minRetryInterval;
@property double maxRetryInterval; // @synthesize maxRetryInterval=_maxRetryInterval;
@property(copy) CDUnknownBlockType retryBlock; // @synthesize retryBlock=_retryBlock;
@property(getter=isRetryEnabled) BOOL retryEnabled; // @synthesize retryEnabled=_retryEnabled;
@property BOOL allowInvalidServerCertificates; // @synthesize allowInvalidServerCertificates=_allowInvalidServerCertificates;
@property BOOL allowLocalhostRequest; // @synthesize allowLocalhostRequest=_allowLocalhostRequest;
@property(copy) NSArray *allowedInsecureSchemes; // @synthesize allowedInsecureSchemes=_allowedInsecureSchemes;
@property(retain) NSURLCredential *proxyCredential; // @synthesize proxyCredential=_proxyCredential;
@property(retain) NSURLCredential *credential; // @synthesize credential=_credential;
@property(retain) NSObject<OS_dispatch_queue> *callbackQueue; // @synthesize callbackQueue=_callbackQueue;
@property(copy) NSString *userAgent; // @synthesize userAgent=_userAgent;
@property(retain) NSHTTPCookieStorage *cookieStorage; // @synthesize cookieStorage=_cookieStorage;
@property(copy) CDUnknownBlockType configurationBlock; // @synthesize configurationBlock=_configurationBlock;
@property(retain) NSURLSessionConfiguration *configuration; // @synthesize configuration=_configuration;
@property unsigned int maxRunningFetchersPerHost; // @synthesize maxRunningFetchersPerHost=_maxRunningFetchersPerHost;
- (void).cxx_destruct;
@property(readonly) NSOperationQueue *delegateQueue;
- (void)detachAuthorizer;
@property(retain) id <GTMFetcherAuthorizationProtocol> authorizer;
@property(retain) NSDictionary *delayedFetchersByHost;
@property(retain) NSDictionary *runningFetchersByHost;
- (void)abandonDispatcher;
@property double unusedSessionTimeout; // @synthesize unusedSessionTimeout=_unusedSessionTimeout;
- (void)resetSession;
@property BOOL reuseSession;
- (void)stopAllFetchers;
- (id)issuedFetchersWithRequestURL:(id)arg1;
- (id)issuedFetchers;
- (unsigned int)numberOfDelayedFetchers;
- (unsigned int)numberOfRunningFetchers;
- (unsigned int)numberOfFetchers;
- (void)fetcherDidStop:(id)arg1;
- (void)stopFetcher:(id)arg1;
- (void)fetcherDidBeginFetching:(id)arg1;
- (void)fetcherDidCreateSession:(id)arg1;
- (id)delegateDispatcherForFetcher:(id)arg1;
- (void)startFetcher:(id)arg1;
- (BOOL)fetcherShouldBeginFetching:(id)arg1;
- (BOOL)isDelayingFetcher:(id)arg1;
- (void)addDelayedFetcher:(id)arg1 forHost:(id)arg2;
- (void)addRunningFetcher:(id)arg1 forHost:(id)arg2;
- (id)sessionDelegate;
- (id)session;
- (id)fetcherWithURLString:(id)arg1;
- (id)fetcherWithURL:(id)arg1;
- (id)fetcherWithRequest:(id)arg1;
- (id)fetcherWithRequest:(id)arg1 fetcherClass:(Class)arg2;
- (void)dealloc;
- (id)init;
- (BOOL)waitForCompletionOfAllFetchersWithTimeout:(double)arg1;
@property int cookieStorageMethod;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

