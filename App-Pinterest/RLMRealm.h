//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSHashTable, NSString, RLMNotifier, RLMSchema;

@interface RLMRealm : NSObject
{
    BOOL _inWriteTransaction;
    unsigned int _threadID;
    NSHashTable *_notificationHandlers;
    struct unique_ptr<tightdb::Replication, std::__1::default_delete<tightdb::Replication>> _replication;
    struct unique_ptr<tightdb::SharedGroup, std::__1::default_delete<tightdb::SharedGroup>> _sharedGroup;
    struct unique_ptr<tightdb::Group, std::__1::default_delete<tightdb::Group>> _readGroup;
    // Error parsing type: ^{Group=^^?{SlabAlloc=^^?L^{Replication}Q{File=i{UniquePtr<char const[], tightdb::util::DefaultDelete<char const[]> >=*}}*iBi{vector<tightdb::SlabAlloc::Slab, std::__1::allocator<tightdb::SlabAlloc::Slab> >=^{Slab}^{Slab}{__compressed_pair<tightdb::SlabAlloc::Slab *, std::__1::allocator<tightdb::SlabAlloc::Slab> >=^{Slab}}}{vector<tightdb::SlabAlloc::Chunk, std::__1::allocator<tightdb::SlabAlloc::Chunk> >=^{Chunk}^{Chunk}{__compressed_pair<tightdb::SlabAlloc::Chunk *, std::__1::allocator<tightdb::SlabAlloc::Chunk> >=^{Chunk}}}{vector<tightdb::SlabAlloc::Chunk, std::__1::allocator<tightdb::SlabAlloc::Chunk> >=^{Chunk}^{Chunk}{__compressed_pair<tightdb::SlabAlloc::Chunk *, std::__1::allocator<tightdb::SlabAlloc::Chunk> >=^{Chunk}}}}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{ArrayString=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{vector<tightdb::Table *, std::__1::allocator<tightdb::Table *> >=^^{Table}^^{Table}{__compressed_pair<tightdb::Table **, std::__1::allocator<tightdb::Table *> >=^^{Table}}}BB}, name: _group
    BOOL _readOnly;
    BOOL _inMemory;
    BOOL _autorefresh;
    BOOL _dynamic;
    NSString *_path;
    RLMSchema *_schema;
    RLMNotifier *_notifier;
}

+ (id)migrateRealmAtPath:(id)arg1 key:(id)arg2;
+ (id)migrateRealmAtPath:(id)arg1 encryptionKey:(id)arg2;
+ (id)migrateRealmAtPath:(id)arg1;
+ (unsigned int)schemaVersionAtPath:(id)arg1 encryptionKey:(id)arg2 error:(id *)arg3;
+ (unsigned int)schemaVersionAtPath:(id)arg1 error:(id *)arg2;
+ (void)setSchemaVersion:(unsigned int)arg1 forRealmAtPath:(id)arg2 withMigrationBlock:(CDUnknownBlockType)arg3;
+ (void)setDefaultRealmSchemaVersion:(unsigned int)arg1 withMigrationBlock:(CDUnknownBlockType)arg2;
+ (void)resetRealmState;
+ (void)setEncryptionKey:(id)arg1 forRealmsAtPath:(id)arg2;
+ (id)realmWithPath:(id)arg1 key:(id)arg2 readOnly:(BOOL)arg3 inMemory:(BOOL)arg4 dynamic:(BOOL)arg5 schema:(id)arg6 error:(id *)arg7;
+ (id)realmWithPath:(id)arg1 encryptionKey:(id)arg2 readOnly:(BOOL)arg3 error:(id *)arg4;
+ (id)inMemoryRealmWithIdentifier:(id)arg1;
+ (id)realmWithPath:(id)arg1 readOnly:(BOOL)arg2 error:(id *)arg3;
+ (id)realmWithPath:(id)arg1;
+ (id)defaultRealm;
+ (id)writeablePathForFile:(id)arg1;
+ (void)setDefaultRealmPath:(id)arg1;
+ (id)defaultRealmPath;
+ (void)initialize;
+ (BOOL)isCoreDebug;
@property(retain, nonatomic) RLMNotifier *notifier; // @synthesize notifier=_notifier;
@property(readonly, nonatomic) BOOL dynamic; // @synthesize dynamic=_dynamic;
@property(readonly, nonatomic) BOOL inWriteTransaction; // @synthesize inWriteTransaction=_inWriteTransaction;
@property(nonatomic) BOOL autorefresh; // @synthesize autorefresh=_autorefresh;
@property(retain, nonatomic) RLMSchema *schema; // @synthesize schema=_schema;
@property(readonly, nonatomic, getter=isReadOnly) BOOL readOnly; // @synthesize readOnly=_readOnly;
@property(readonly, nonatomic) NSString *path; // @synthesize path=_path;
- (id).cxx_construct;
- (void).cxx_destruct;
- (BOOL)writeCopyToPath:(id)arg1 encryptionKey:(id)arg2 error:(id *)arg3;
- (BOOL)writeCopyToPath:(id)arg1 error:(id *)arg2;
- (BOOL)writeCopyToPath:(id)arg1 key:(id)arg2 error:(id *)arg3;
- (id)createObject:(id)arg1 withObject:(id)arg2;
- (id)objects:(id)arg1 withPredicate:(id)arg2;
- (id)objects:(id)arg1 where:(id)arg2 args:(void *)arg3;
- (id)objects:(id)arg1 where:(id)arg2;
- (id)allObjects:(id)arg1;
- (void)deleteAllObjects;
- (void)deleteObjects:(id)arg1;
- (void)deleteObject:(id)arg1;
- (void)addOrUpdateObjectsFromArray:(id)arg1;
- (void)addOrUpdateObject:(id)arg1;
- (void)addObjects:(id)arg1;
- (void)addObject:(id)arg1;
- (BOOL)refresh;
- (void)handleExternalCommit;
- (void)dealloc;
- (void)invalidate;
- (void)cancelWriteTransaction;
- (void)transactionWithBlock:(CDUnknownBlockType)arg1;
- (void)commitWriteTransaction;
- (void)beginWriteTransaction;
- (void)sendNotifications:(id)arg1;
- (void)removeNotification:(id)arg1;
- (id)addNotificationBlock:(CDUnknownBlockType)arg1;
- (CDUnknownBlockType)migrationBlock:(id)arg1;
-     // Error parsing type: ^{Group=^^?{SlabAlloc=^^?L^{Replication}Q{File=i{UniquePtr<char const[], tightdb::util::DefaultDelete<char const[]> >=*}}*iBi{vector<tightdb::SlabAlloc::Slab, std::__1::allocator<tightdb::SlabAlloc::Slab> >=^{Slab}^{Slab}{__compressed_pair<tightdb::SlabAlloc::Slab *, std::__1::allocator<tightdb::SlabAlloc::Slab> >=^{Slab}}}{vector<tightdb::SlabAlloc::Chunk, std::__1::allocator<tightdb::SlabAlloc::Chunk> >=^{Chunk}^{Chunk}{__compressed_pair<tightdb::SlabAlloc::Chunk *, std::__1::allocator<tightdb::SlabAlloc::Chunk> >=^{Chunk}}}{vector<tightdb::SlabAlloc::Chunk, std::__1::allocator<tightdb::SlabAlloc::Chunk> >=^{Chunk}^{Chunk}{__compressed_pair<tightdb::SlabAlloc::Chunk *, std::__1::allocator<tightdb::SlabAlloc::Chunk> >=^{Chunk}}}}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{ArrayString=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{vector<tightdb::Table *, std::__1::allocator<tightdb::Table *> >=^^{Table}^^{Table}{__compressed_pair<tightdb::Table **, std::__1::allocator<tightdb::Table *> >=^^{Table}}}BB}8@0:4, name: getOrCreateGroup
- (id)initWithPath:(id)arg1 key:(id)arg2 readOnly:(BOOL)arg3 inMemory:(BOOL)arg4 dynamic:(BOOL)arg5 error:(id *)arg6;

// Remaining properties
// Error parsing type for property group:
// Property attributes: T^{Group=^^?{SlabAlloc=^^?L^{Replication}Q{File=i{UniquePtr<char const[], tightdb::util::DefaultDelete<char const[]> >=*}}*iBi{vector<tightdb::SlabAlloc::Slab, std::__1::allocator<tightdb::SlabAlloc::Slab> >=^{Slab}^{Slab}{__compressed_pair<tightdb::SlabAlloc::Slab *, std::__1::allocator<tightdb::SlabAlloc::Slab> >=^{Slab}}}{vector<tightdb::SlabAlloc::Chunk, std::__1::allocator<tightdb::SlabAlloc::Chunk> >=^{Chunk}^{Chunk}{__compressed_pair<tightdb::SlabAlloc::Chunk *, std::__1::allocator<tightdb::SlabAlloc::Chunk> >=^{Chunk}}}{vector<tightdb::SlabAlloc::Chunk, std::__1::allocator<tightdb::SlabAlloc::Chunk> >=^{Chunk}^{Chunk}{__compressed_pair<tightdb::SlabAlloc::Chunk *, std::__1::allocator<tightdb::SlabAlloc::Chunk> >=^{Chunk}}}}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{ArrayString=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{Array=^^?*LLLLBBB^{ArrayParent}L^{Allocator}[7]qq}{vector<tightdb::Table *, std::__1::allocator<tightdb::Table *> >=^^{Table}^^{Table}{__compressed_pair<tightdb::Table **, std::__1::allocator<tightdb::Table *> >=^^{Table}}}BB},R,N,GgetOrCreateGroup


@end

