//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class FBExceptionHandler, FBPlatformAppBridgeTypeToJSONConverter, FBUserSession, NSDictionary, NSMutableDictionary, NSString, NSURL, UIImage;

@interface FBPlatformAction : NSObject
{
    FBExceptionHandler *_exceptionHandler;
    BOOL _isCompleted;
    NSString *_actionIDForLogOnly;
    NSString *_appFBID;
    UIImage *_appIcon;
    NSString *_appName;
    NSString *_appSchemeSuffix;
    NSDictionary *_arguments;
    NSDictionary *_bridgeArguments;
    id <FBPlatformActionDelegate> _delegate;
    NSString *_method;
    FBUserSession *_session;
    NSString *_sourceApplication;
    NSString *_version;
    NSDictionary *_webViewArguments;
    FBPlatformAppBridgeTypeToJSONConverter *_appBridgeTypeConverter;
    NSMutableDictionary *_resultBridgeArguments;
    NSString *_cipherKey;
    id <FBPlatformURLOpening> _platformURLOpener;
    NSURL *_uncaughtExceptionResponseURL;
    NSString *_identitySafeForEqualityCheck;
}

+ (id)singleUsePlatformURLOpener;
+ (void)registerSingleUsePlatformURLOpener:(id)arg1;
@property(readonly, copy, nonatomic) NSString *identitySafeForEqualityCheck; // @synthesize identitySafeForEqualityCheck=_identitySafeForEqualityCheck;
@property(retain, nonatomic) NSURL *uncaughtExceptionResponseURL; // @synthesize uncaughtExceptionResponseURL=_uncaughtExceptionResponseURL;
@property(retain, nonatomic) id <FBPlatformURLOpening> platformURLOpener; // @synthesize platformURLOpener=_platformURLOpener;
@property(copy, nonatomic) NSString *cipherKey; // @synthesize cipherKey=_cipherKey;
@property(readonly, nonatomic) NSMutableDictionary *resultBridgeArguments; // @synthesize resultBridgeArguments=_resultBridgeArguments;
@property(retain, nonatomic) FBPlatformAppBridgeTypeToJSONConverter *appBridgeTypeConverter; // @synthesize appBridgeTypeConverter=_appBridgeTypeConverter;
@property(copy, nonatomic) NSDictionary *webViewArguments; // @synthesize webViewArguments=_webViewArguments;
@property(copy, nonatomic) NSString *version; // @synthesize version=_version;
@property(copy, nonatomic) NSString *sourceApplication; // @synthesize sourceApplication=_sourceApplication;
@property(retain, nonatomic) FBUserSession *session; // @synthesize session=_session;
@property(copy, nonatomic) NSString *method; // @synthesize method=_method;
@property(nonatomic) __weak id <FBPlatformActionDelegate> delegate; // @synthesize delegate=_delegate;
@property(copy, nonatomic) NSDictionary *bridgeArguments; // @synthesize bridgeArguments=_bridgeArguments;
@property(copy, nonatomic) NSDictionary *arguments; // @synthesize arguments=_arguments;
@property(copy, nonatomic) NSString *appSchemeSuffix; // @synthesize appSchemeSuffix=_appSchemeSuffix;
@property(copy, nonatomic) NSString *appName; // @synthesize appName=_appName;
@property(retain, nonatomic) UIImage *appIcon; // @synthesize appIcon=_appIcon;
@property(copy, nonatomic) NSString *appFBID; // @synthesize appFBID=_appFBID;
@property(copy, nonatomic) NSString *actionIDForLogOnly; // @synthesize actionIDForLogOnly=_actionIDForLogOnly;
@property(readonly, nonatomic, getter=isCompleted) BOOL completed; // @synthesize completed=_isCompleted;
- (void).cxx_destruct;
- (void)_cleanUp;
- (void)_exceptionBlockHelper;
- (void)_openPlatformURL:(id)arg1 actionDidComplete:(BOOL)arg2;
- (id)_dictionaryFromJSONString:(id)arg1;
- (id)_jsonStringFromDictionary:(id)arg1 excludeBinaryData:(BOOL)arg2;
- (id)_encryptedQueryParamsWithPayload:(id)arg1 symmetricKey:(id)arg2;
- (id)_responseURLWithArguments:(id)arg1 errorArguments:(id)arg2 cipherKey:(id)arg3;
- (id)_responseURLWithArguments:(id)arg1 errorArguments:(id)arg2;
- (id)_responseURLWithArguments:(id)arg1 error:(id)arg2;
- (void)_completeWithArguments:(id)arg1 errorArguments:(id)arg2;
- (void)completeWithErrorForUncaughtException;
- (void)completeWithErrorArguments:(id)arg1;
- (void)completeWithError:(id)arg1;
- (void)completeWithArguments:(id)arg1;
@property(readonly, copy, nonatomic) NSString *contentType;
- (unsigned int)hash;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithURL:(id)arg1 session:(id)arg2 sourceApplication:(id)arg3 version:(id)arg4 exceptionHandler:(id)arg5;
- (id)initWithURL:(id)arg1 session:(id)arg2 sourceApplication:(id)arg3 version:(id)arg4;

@end

