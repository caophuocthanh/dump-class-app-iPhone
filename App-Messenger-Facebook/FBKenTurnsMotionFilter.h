//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class POPSpringAnimation;

@interface FBKenTurnsMotionFilter : NSObject
{
    float _rotationRange;
    float _filtrationRate;
    float _filtrationRange;
    float _competingSignalPercentageThreshold;
    float _rotationSlop;
    float _rotationDeltaHistory[15];
    float _rotationDeltaAverage;
    float _rotationDeltaMagnitudeAverage;
    float _currentRotation;
    float _targetRotation;
    float _initialError;
    float _remainingError;
    float _errorDistanceRemaining;
    float _maxErrorCorrection;
    BOOL _turning;
    BOOL _updating;
    BOOL _errorCorrectionEnabled;
    double _lastUpdate;
    POPSpringAnimation *_spring;
    id <FBKenTurnsMotionFilterDelegate> _delegate;
    struct {
        unsigned int updatedYRotation:1;
        unsigned int rotatedPastRange:1;
        unsigned int didStartTurning:1;
        unsigned int didStopTurning:1;
    } _delegateFlags;
    float _rotation;
    float _currentAbsoluteRotation;
}

@property(nonatomic) float currentAbsoluteRotation; // @synthesize currentAbsoluteRotation=_currentAbsoluteRotation;
@property(readonly, nonatomic) float rotation; // @synthesize rotation=_rotation;
@property(nonatomic) BOOL errorCorrectionEnabled; // @synthesize errorCorrectionEnabled=_errorCorrectionEnabled;
@property(nonatomic) double lastUpdate; // @synthesize lastUpdate=_lastUpdate;
@property(nonatomic) float competingSignalPercentageThreshold; // @synthesize competingSignalPercentageThreshold=_competingSignalPercentageThreshold;
@property(nonatomic) float filtrationRange; // @synthesize filtrationRange=_filtrationRange;
@property(nonatomic) float filtrationRate; // @synthesize filtrationRate=_filtrationRate;
@property(nonatomic) float currentRotation; // @synthesize currentRotation=_currentRotation;
@property(nonatomic) __weak id <FBKenTurnsMotionFilterDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) float rotationSlop; // @synthesize rotationSlop=_rotationSlop;
@property(nonatomic) float rotationRange; // @synthesize rotationRange=_rotationRange;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(nonatomic) float springTension;
@property(nonatomic) float springFriction;
@property(readonly, nonatomic) float rotationPercent;
- (void)reset;
- (void)resetError;
- (void)updateWithDeviceMotion:(id)arg1;
- (void)stopUpdating;
- (void)startUpdating;
- (float)_maxErrorCorrectionForRotationRange:(float)arg1;
- (void)_updateRotationForYDegreesTravelled:(float)arg1;
- (float)_clampRotation:(float)arg1;
- (void)_updateAverageForYDegreesTravelled:(float)arg1;
- (void)_setTurning:(BOOL)arg1;
- (id)init;

@end

