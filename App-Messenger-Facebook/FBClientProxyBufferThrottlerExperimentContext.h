//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "FBExperimentContext.h"

@interface FBClientProxyBufferThrottlerExperimentContext : FBExperimentContext
{
    BOOL _stallOnlyWhenLoaded;
    BOOL _stallOnlyWhenPlayerLikelyToStallToo;
    BOOL _useResourceLoader;
    BOOL _allowPrepare;
    BOOL _hlsSupported;
    BOOL _shouldCancelDownloadsDirectly;
    BOOL _shouldCancelAssetLoading;
    BOOL _cancelNetworkOnDirectCancel;
    BOOL _truncateCacheOnContinuation;
    BOOL _passthruPrefetchCancel;
    BOOL _alignLengthToBlockBoundaryOnThrottling;
    int _bytesAtomCompensationBuffer;
    int _throttlerType;
    int _stallPredictionThreshold;
    int _secondsFetchedBeforePlaying;
    int _secondsFetchedBeforePlayingCell;
    int _aggressiveCancellationMaxState;
    unsigned int _closeTimeout;
    int _minSingleNetworkFetchByteSize;
    double _ratio;
    double _fileSizeAtomCompensationBuffer;
    double _vbrTimeCompensationBuffer;
    double _maxVbrTimeCompensationBuffer;
    double _singleFetchMultiplier;
}

+ (BOOL)allowUserInterfaceIdiom:(int)arg1;
+ (id)parameterConfigurations;
+ (id)experimentName;
@property(readonly, nonatomic) int minSingleNetworkFetchByteSize; // @synthesize minSingleNetworkFetchByteSize=_minSingleNetworkFetchByteSize;
@property(readonly, nonatomic) BOOL alignLengthToBlockBoundaryOnThrottling; // @synthesize alignLengthToBlockBoundaryOnThrottling=_alignLengthToBlockBoundaryOnThrottling;
@property(readonly, nonatomic) BOOL passthruPrefetchCancel; // @synthesize passthruPrefetchCancel=_passthruPrefetchCancel;
@property(readonly, nonatomic) BOOL truncateCacheOnContinuation; // @synthesize truncateCacheOnContinuation=_truncateCacheOnContinuation;
@property(readonly, nonatomic) unsigned int closeTimeout; // @synthesize closeTimeout=_closeTimeout;
@property(readonly, nonatomic) BOOL cancelNetworkOnDirectCancel; // @synthesize cancelNetworkOnDirectCancel=_cancelNetworkOnDirectCancel;
@property(readonly, nonatomic) BOOL shouldCancelAssetLoading; // @synthesize shouldCancelAssetLoading=_shouldCancelAssetLoading;
@property(readonly, nonatomic) BOOL shouldCancelDownloadsDirectly; // @synthesize shouldCancelDownloadsDirectly=_shouldCancelDownloadsDirectly;
@property(readonly, nonatomic) int aggressiveCancellationMaxState; // @synthesize aggressiveCancellationMaxState=_aggressiveCancellationMaxState;
@property(readonly, nonatomic) BOOL hlsSupported; // @synthesize hlsSupported=_hlsSupported;
@property(readonly, nonatomic) BOOL allowPrepare; // @synthesize allowPrepare=_allowPrepare;
@property(readonly, nonatomic) BOOL useResourceLoader; // @synthesize useResourceLoader=_useResourceLoader;
@property(readonly, nonatomic) BOOL stallOnlyWhenPlayerLikelyToStallToo; // @synthesize stallOnlyWhenPlayerLikelyToStallToo=_stallOnlyWhenPlayerLikelyToStallToo;
@property(readonly, nonatomic) BOOL stallOnlyWhenLoaded; // @synthesize stallOnlyWhenLoaded=_stallOnlyWhenLoaded;
@property(readonly, nonatomic) int secondsFetchedBeforePlayingCell; // @synthesize secondsFetchedBeforePlayingCell=_secondsFetchedBeforePlayingCell;
@property(readonly, nonatomic) int secondsFetchedBeforePlaying; // @synthesize secondsFetchedBeforePlaying=_secondsFetchedBeforePlaying;
@property(readonly, nonatomic) int stallPredictionThreshold; // @synthesize stallPredictionThreshold=_stallPredictionThreshold;
@property(readonly, nonatomic) int throttlerType; // @synthesize throttlerType=_throttlerType;
@property(readonly, nonatomic) double singleFetchMultiplier; // @synthesize singleFetchMultiplier=_singleFetchMultiplier;
@property(readonly, nonatomic) double maxVbrTimeCompensationBuffer; // @synthesize maxVbrTimeCompensationBuffer=_maxVbrTimeCompensationBuffer;
@property(readonly, nonatomic) double vbrTimeCompensationBuffer; // @synthesize vbrTimeCompensationBuffer=_vbrTimeCompensationBuffer;
@property(readonly, nonatomic) int bytesAtomCompensationBuffer; // @synthesize bytesAtomCompensationBuffer=_bytesAtomCompensationBuffer;
@property(readonly, nonatomic) double fileSizeAtomCompensationBuffer; // @synthesize fileSizeAtomCompensationBuffer=_fileSizeAtomCompensationBuffer;
@property(readonly, nonatomic) double ratio; // @synthesize ratio=_ratio;

@end

