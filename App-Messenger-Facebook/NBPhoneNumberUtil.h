//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSDictionary, NSMutableDictionary;

@interface NBPhoneNumberUtil : NSObject
{
    NSMutableDictionary *_coreMetaData;
    NSMutableDictionary *_mapCCode2CN;
    NSMutableDictionary *_mapCN2CCode;
    NSMutableDictionary *_i18nNumberFormat;
    NSMutableDictionary *_i18nPhoneNumberDesc;
    NSMutableDictionary *_i18nPhoneMetadata;
}

+ (id)stringByTrimming:(id)arg1;
+ (id)sharedInstanceForTest;
+ (id)sharedInstance;
@property(retain, nonatomic) NSMutableDictionary *i18nPhoneMetadata; // @synthesize i18nPhoneMetadata=_i18nPhoneMetadata;
@property(retain, nonatomic) NSMutableDictionary *i18nPhoneNumberDesc; // @synthesize i18nPhoneNumberDesc=_i18nPhoneNumberDesc;
@property(retain, nonatomic) NSMutableDictionary *i18nNumberFormat; // @synthesize i18nNumberFormat=_i18nNumberFormat;
@property(retain, nonatomic) NSMutableDictionary *mapCN2CCode; // @synthesize mapCN2CCode=_mapCN2CCode;
@property(retain, nonatomic) NSMutableDictionary *mapCCode2CN; // @synthesize mapCCode2CN=_mapCCode2CN;
@property(readonly, nonatomic) NSMutableDictionary *coreMetaData; // @synthesize coreMetaData=_coreMetaData;
- (void).cxx_destruct;
- (id)getAllMetadata;
- (BOOL)matchesEntirely:(id)arg1 string:(id)arg2;
- (BOOL)canBeInternationallyDialled:(id)arg1;
- (BOOL)canBeInternationallyDialled:(id)arg1 error:(id *)arg2;
- (BOOL)isNationalNumberSuffixOfTheOther:(id)arg1 second:(id)arg2;
- (int)isNumberMatch:(id)arg1 second:(id)arg2;
- (int)isNumberMatch:(id)arg1 second:(id)arg2 error:(id *)arg3;
- (id)extractOptionalPauseComponent:(id)arg1 numberLeftToParse:(id *)arg2;
- (void)buildNationalNumberForParsing:(id)arg1 nationalNumber:(id *)arg2;
- (id)parseHelper:(id)arg1 defaultRegion:(id)arg2 keepRawInput:(BOOL)arg3 checkRegion:(BOOL)arg4;
- (id)parseHelper:(id)arg1 defaultRegion:(id)arg2 keepRawInput:(BOOL)arg3 checkRegion:(BOOL)arg4 error:(id *)arg5;
- (id)parseAndKeepRawInput:(id)arg1 defaultRegion:(id)arg2;
- (id)parseAndKeepRawInput:(id)arg1 defaultRegion:(id)arg2 error:(id *)arg3;
- (id)countyCodeByCarrier;
- (id)parseWithPhoneCarrierRegion:(id)arg1 error:(id *)arg2;
- (id)parse:(id)arg1 defaultRegion:(id)arg2 error:(id *)arg3;
- (id)parse:(id)arg1 defaultRegion:(id)arg2;
- (BOOL)checkRegionForParsing:(id)arg1 defaultRegion:(id)arg2;
- (id)maybeStripExtension:(id *)arg1;
- (BOOL)maybeStripNationalPrefixAndCarrierCode:(id *)arg1 metadata:(id)arg2 carrierCode:(id *)arg3;
- (BOOL)maybeStripNationalPrefixAndCarrierCode:(id *)arg1 metadata:(id)arg2 carrierCode:(id *)arg3 error:(id *)arg4;
- (int)maybeStripInternationalPrefixAndNormalize:(id *)arg1 possibleIddPrefix:(id)arg2;
- (int)maybeStripInternationalPrefixAndNormalize:(id *)arg1 possibleIddPrefix:(id)arg2 error:(id *)arg3;
- (BOOL)parsePrefixAsIdd:(id)arg1 sourceString:(id *)arg2;
- (unsigned long)maybeExtractCountryCode:(id)arg1 metadata:(id)arg2 nationalNumber:(id *)arg3 keepRawInput:(BOOL)arg4 phoneNumber:(id *)arg5;
- (unsigned long)maybeExtractCountryCode:(id)arg1 metadata:(id)arg2 nationalNumber:(id *)arg3 keepRawInput:(BOOL)arg4 phoneNumber:(id *)arg5 error:(id *)arg6;
- (unsigned long)extractCountryCode:(id)arg1 nationalNumber:(id *)arg2;
- (BOOL)truncateTooLongNumber:(id)arg1;
- (BOOL)truncateTooLongNumber:(id)arg1 error:(id *)arg2;
- (BOOL)isPossibleNumberString:(id)arg1 regionDialingFrom:(id)arg2;
- (BOOL)isPossibleNumberString:(id)arg1 regionDialingFrom:(id)arg2 error:(id *)arg3;
- (int)isPossibleNumberWithReason:(id)arg1;
- (int)isPossibleNumberWithReason:(id)arg1 error:(id *)arg2;
- (int)testNumberLengthAgainstPattern:(id)arg1 number:(id)arg2;
- (BOOL)isPossibleNumber:(id)arg1;
- (BOOL)isPossibleNumber:(id)arg1 error:(id *)arg2;
- (BOOL)isAlphaNumber:(id)arg1;
- (BOOL)isLeadingZeroPossible:(unsigned long)arg1;
- (BOOL)isNANPACountry:(id)arg1;
- (id)getNddPrefixForRegion:(id)arg1 stripNonDigits:(BOOL)arg2;
- (unsigned long)getCountryCodeForValidRegion:(id)arg1;
- (unsigned long)getCountryCodeForValidRegion:(id)arg1 error:(id *)arg2;
- (unsigned long)getCountryCodeForRegion:(id)arg1;
- (id)getRegionCodesForCountryCode:(unsigned long)arg1;
- (id)getRegionCodeForCountryCode:(unsigned long)arg1;
- (id)getRegionCodeForNumberFromRegionList:(id)arg1 regionCodes:(id)arg2;
- (id)getRegionCodeForNumber:(id)arg1;
- (BOOL)isValidNumberForRegion:(id)arg1 regionCode:(id)arg2;
- (BOOL)isValidNumber:(id)arg1;
- (BOOL)isNumberMatchingDesc:(id)arg1 numberDesc:(id)arg2;
- (id)getMetadataForNonGeographicalRegion:(unsigned long)arg1;
- (id)getMetadataForRegion:(id)arg1;
- (int)getNumberTypeHelper:(id)arg1 metadata:(id)arg2;
- (int)getNumberType:(id)arg1;
- (id)getNumberDescByType:(id)arg1 type:(int)arg2;
- (id)maybeGetFormattedExtension:(id)arg1 metadata:(id)arg2 numberFormat:(int)arg3;
- (id)getExampleNumberForNonGeoEntity:(unsigned long)arg1;
- (id)getExampleNumberForNonGeoEntity:(unsigned long)arg1 error:(id *)arg2;
- (id)getExampleNumberForType:(id)arg1 type:(int)arg2;
- (id)getExampleNumberForType:(id)arg1 type:(int)arg2 error:(id *)arg3;
- (id)getExampleNumber:(id)arg1;
- (id)getExampleNumber:(id)arg1 error:(id *)arg2;
- (id)formatNsnUsingPattern:(id)arg1 formattingPattern:(id)arg2 numberFormat:(int)arg3 carrierCode:(id)arg4;
- (id)chooseFormattingPatternForNumber:(id)arg1 nationalNumber:(id)arg2;
- (id)formatNsn:(id)arg1 metadata:(id)arg2 phoneNumberFormat:(int)arg3 carrierCode:(id)arg4;
- (id)formatOutOfCountryKeepingAlphaChars:(id)arg1 regionCallingFrom:(id)arg2;
- (id)formatOutOfCountryKeepingAlphaChars:(id)arg1 regionCallingFrom:(id)arg2 error:(id *)arg3;
- (BOOL)hasFormattingPatternForNumber:(id)arg1;
- (BOOL)hasUnexpectedItalianLeadingZero:(id)arg1;
- (BOOL)rawInputContainsNationalPrefix:(id)arg1 nationalPrefix:(id)arg2 regionCode:(id)arg3;
- (id)formatInOriginalFormat:(id)arg1 regionCallingFrom:(id)arg2;
- (id)formatInOriginalFormat:(id)arg1 regionCallingFrom:(id)arg2 error:(id *)arg3;
- (id)prefixNumberWithCountryCallingCode:(unsigned long)arg1 phoneNumberFormat:(int)arg2 formattedNationalNumber:(id)arg3 formattedExtension:(id)arg4;
- (id)formatOutOfCountryCallingNumber:(id)arg1 regionCallingFrom:(id)arg2;
- (id)formatOutOfCountryCallingNumber:(id)arg1 regionCallingFrom:(id)arg2 error:(id *)arg3;
- (id)formatNumberForMobileDialing:(id)arg1 regionCallingFrom:(id)arg2 withFormatting:(BOOL)arg3;
- (id)formatNumberForMobileDialing:(id)arg1 regionCallingFrom:(id)arg2 withFormatting:(BOOL)arg3 error:(id *)arg4;
- (id)formatNationalNumberWithPreferredCarrierCode:(id)arg1 fallbackCarrierCode:(id)arg2;
- (id)formatNationalNumberWithPreferredCarrierCode:(id)arg1 fallbackCarrierCode:(id)arg2 error:(id *)arg3;
- (id)getMetadataForRegionOrCallingCode:(unsigned long)arg1 regionCode:(id)arg2;
- (id)formatNationalNumberWithCarrierCode:(id)arg1 carrierCode:(id)arg2;
- (id)formatNationalNumberWithCarrierCode:(id)arg1 carrierCode:(id)arg2 error:(id *)arg3;
- (id)formatByPattern:(id)arg1 numberFormat:(int)arg2 userDefinedFormats:(id)arg3;
- (id)formatByPattern:(id)arg1 numberFormat:(int)arg2 userDefinedFormats:(id)arg3 error:(id *)arg4;
- (id)format:(id)arg1 numberFormat:(int)arg2;
- (id)format:(id)arg1 numberFormat:(int)arg2 error:(id *)arg3;
- (BOOL)hasValidCountryCallingCode:(unsigned long)arg1;
- (BOOL)isValidRegionCode:(id)arg1;
- (BOOL)isNumberGeographical:(id)arg1;
- (BOOL)formattingRuleHasFirstGroupOnly:(id)arg1;
- (id)normalizeHelper:(id)arg1 normalizationReplacements:(id)arg2 removeNonMatches:(BOOL)arg3;
- (unsigned int)getLengthOfNationalDestinationCode:(id)arg1;
- (unsigned int)getLengthOfNationalDestinationCode:(id)arg1 error:(id *)arg2;
- (unsigned int)getLengthOfGeographicalAreaCode:(id)arg1;
- (unsigned int)getLengthOfGeographicalAreaCode:(id)arg1 error:(id *)arg2;
- (id)convertAlphaCharactersInNumber:(id)arg1;
- (id)normalizeDigitsOnly:(id)arg1;
- (void)normalizeSB:(id *)arg1;
- (id)normalizePhoneNumber:(id)arg1;
- (BOOL)isViablePhoneNumber:(id)arg1;
- (id)extractPossibleNumber:(id)arg1;
- (void)initCC2CN;
- (void)initNormalizationMappings;
@property(readonly, nonatomic) NSDictionary *DIGIT_MAPPINGS;
- (void)clearCN2CC;
- (void)clearCC2CN;
- (void)dealloc;
- (void)initRegularExpressionSet;
- (id)loadMetadata:(id)arg1;
- (id)initForTest;
- (id)initWithPhoneNumberMetadata:(id)arg1;
- (id)init;
- (id)countryCodeFromRegionCode:(id)arg1;
- (id)regionCodeFromCountryCode:(unsigned long)arg1;
- (id)getNationalSignificantNumber:(id)arg1;
- (BOOL)isNaN:(id)arg1;
- (id)stringByReplacingOccurrencesString:(id)arg1 withMap:(id)arg2 removeNonMatches:(BOOL)arg3;
- (BOOL)isStartingStringByRegex:(id)arg1 regex:(id)arg2;
- (id)matchedStringByRegex:(id)arg1 regex:(id)arg2;
- (id)matchesByRegex:(id)arg1 regex:(id)arg2;
- (id)matcheFirstByRegex:(id)arg1 regex:(id)arg2;
- (id)replaceStringByRegex:(id)arg1 regex:(id)arg2 withTemplate:(id)arg3;
- (id)replaceFirstStringByRegex:(id)arg1 regex:(id)arg2 withTemplate:(id)arg3;
- (int)indexOfStringByString:(id)arg1 target:(id)arg2;
- (int)stringPositionByRegex:(id)arg1 regex:(id)arg2;
- (id)componentsSeparatedByRegex:(id)arg1 regex:(id)arg2;
- (id)regularExpressionWithPattern:(id)arg1 options:(unsigned int)arg2 error:(id *)arg3;
- (BOOL)hasValue:(id)arg1;

@end

