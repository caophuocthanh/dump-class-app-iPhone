//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "JavaUtilAbstractMap.h"

#import "JavaIoSerializable.h"
#import "JavaUtilConcurrentConcurrentNavigableMap.h"
#import "NSCopying.h"

@class JavaUtilConcurrentConcurrentSkipListMap_EntrySet, JavaUtilConcurrentConcurrentSkipListMap_KeySet, JavaUtilConcurrentConcurrentSkipListMap_Values, NSString;

@interface JavaUtilConcurrentConcurrentSkipListMap : JavaUtilAbstractMap <JavaUtilConcurrentConcurrentNavigableMap, NSCopying, JavaIoSerializable>
{
    // Error parsing type: A^v, name: head_
    id <JavaUtilComparator> comparator_;
    int randomSeed_;
    JavaUtilConcurrentConcurrentSkipListMap_KeySet *keySet_ConcurrentSkipListMap_;
    JavaUtilConcurrentConcurrentSkipListMap_EntrySet *entrySet_;
    JavaUtilConcurrentConcurrentSkipListMap_Values *values_;
    id <JavaUtilConcurrentConcurrentNavigableMap> descendingMap_;
}

+ (const struct J2ObjcClassInfo *)__metadata;
+ (void)initialize;
+ (id)toListWithJavaUtilCollection:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)__javaClone;
- (void)dealloc;
- (id)entryIterator;
- (id)valueIterator;
- (id)keyIterator;
- (id)pollLastEntry;
- (id)pollFirstEntry;
- (id)lastEntry;
- (id)firstEntry;
- (id)higherKeyWithId:(id)arg1;
- (id)higherEntryWithId:(id)arg1;
- (id)ceilingKeyWithId:(id)arg1;
- (id)ceilingEntryWithId:(id)arg1;
- (id)floorKeyWithId:(id)arg1;
- (id)floorEntryWithId:(id)arg1;
- (id)lowerKeyWithId:(id)arg1;
- (id)lowerEntryWithId:(id)arg1;
- (id)tailMapWithId:(id)arg1;
- (id)headMapWithId:(id)arg1;
- (id)subMapWithId:(id)arg1 withId:(id)arg2;
- (id)tailMapWithId:(id)arg1 withBoolean:(BOOL)arg2;
- (id)headMapWithId:(id)arg1 withBoolean:(BOOL)arg2;
- (id)subMapWithId:(id)arg1 withBoolean:(BOOL)arg2 withId:(id)arg3 withBoolean:(BOOL)arg4;
- (id)lastKey;
- (id)firstKey;
- (id)comparator;
- (id)replaceWithId:(id)arg1 withId:(id)arg2;
- (BOOL)replaceWithId:(id)arg1 withId:(id)arg2 withId:(id)arg3;
- (BOOL)removeWithId:(id)arg1 withId:(id)arg2;
- (id)putIfAbsentWithId:(id)arg1 withId:(id)arg2;
- (BOOL)isEqual:(id)arg1;
- (id)descendingKeySet;
- (id)descendingMap;
- (id)entrySet;
- (id)values;
- (id)navigableKeySet;
- (id)keySet;
- (void)clear;
- (BOOL)isEmpty;
- (int)size;
- (BOOL)containsValueWithId:(id)arg1;
- (id)removeWithId:(id)arg1;
- (id)putWithId:(id)arg1 withId:(id)arg2;
- (id)getWithId:(id)arg1;
- (BOOL)containsKeyWithId:(id)arg1;
- (void)readObjectWithJavaIoObjectInputStream:(id)arg1;
- (void)writeObjectWithJavaIoObjectOutputStream:(id)arg1;
- (void)buildFromSortedWithJavaUtilSortedMap:(id)arg1;
- (id)clone;
- (id)initWithJavaUtilSortedMap:(id)arg1;
- (id)initWithJavaUtilMap:(id)arg1;
- (id)initWithJavaUtilComparator:(id)arg1;
- (id)init;
- (id)getNearWithId:(id)arg1 withInt:(int)arg2;
- (id)findNearWithId:(id)arg1 withInt:(int)arg2;
- (id)doRemoveLastEntry;
- (id)findPredecessorOfLast;
- (id)findLast;
- (void)clearIndexToFirst;
- (id)doRemoveFirstEntry;
- (id)findFirst;
- (void)tryReduceLevel;
- (id)doRemoveWithId:(id)arg1 withId:(id)arg2;
- (void)addIndexWithJavaUtilConcurrentConcurrentSkipListMap_Index:(id)arg1 withJavaUtilConcurrentConcurrentSkipListMap_HeadIndex:(id)arg2 withInt:(int)arg3;
- (void)insertIndexWithJavaUtilConcurrentConcurrentSkipListMap_Node:(id)arg1 withInt:(int)arg2;
- (int)randomLevel;
- (id)doPutWithId:(id)arg1 withId:(id)arg2 withBoolean:(BOOL)arg3;
- (id)doGetWithId:(id)arg1;
- (id)findNodeWithJavaLangComparable:(id)arg1;
- (id)findPredecessorWithJavaLangComparable:(id)arg1;
- (BOOL)inOpenRangeWithId:(id)arg1 withId:(id)arg2 withId:(id)arg3;
- (BOOL)inHalfOpenRangeWithId:(id)arg1 withId:(id)arg2 withId:(id)arg3;
- (int)compareWithId:(id)arg1 withId:(id)arg2;
- (id)comparableWithId:(id)arg1;
- (BOOL)casHeadWithJavaUtilConcurrentConcurrentSkipListMap_HeadIndex:(id)arg1 withJavaUtilConcurrentConcurrentSkipListMap_HeadIndex:(id)arg2;
- (void)initialize__;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

