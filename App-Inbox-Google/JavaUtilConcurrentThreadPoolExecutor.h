//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "JavaUtilConcurrentAbstractExecutorService.h"

@class JavaUtilConcurrentAtomicAtomicInteger, JavaUtilConcurrentLocksReentrantLock, JavaUtilHashSet;

@interface JavaUtilConcurrentThreadPoolExecutor : JavaUtilConcurrentAbstractExecutorService
{
    JavaUtilConcurrentAtomicAtomicInteger *ctl_;
    id <JavaUtilConcurrentBlockingQueue> workQueue_;
    JavaUtilConcurrentLocksReentrantLock *mainLock_;
    JavaUtilHashSet *workers_;
    id <JavaUtilConcurrentLocksCondition> termination_;
    int largestPoolSize_;
    long long completedTaskCount_;
    // Error parsing type: A^v, name: threadFactory_
    // Error parsing type: A^v, name: handler_
    // Error parsing type: Aq, name: keepAliveTime_
    // Error parsing type: Ac, name: allowCoreThreadTimeOut_
    // Error parsing type: Ai, name: corePoolSize_
    // Error parsing type: Ai, name: maximumPoolSize_
}

+ (const struct J2ObjcClassInfo *)__metadata;
+ (void)initialize;
+ (BOOL)isRunningWithInt:(int)arg1;
+ (BOOL)runStateAtLeastWithInt:(int)arg1 withInt:(int)arg2;
+ (BOOL)runStateLessThanWithInt:(int)arg1 withInt:(int)arg2;
+ (int)ctlOfWithInt:(int)arg1 withInt:(int)arg2;
+ (int)workerCountOfWithInt:(int)arg1;
+ (int)runStateOfWithInt:(int)arg1;
- (void)__javaClone;
- (void)terminated;
- (void)afterExecuteWithJavaLangRunnable:(id)arg1 withJavaLangThrowable:(id)arg2;
- (void)beforeExecuteWithJavaLangThread:(id)arg1 withJavaLangRunnable:(id)arg2;
- (id)description;
- (long long)getCompletedTaskCount;
- (long long)getTaskCount;
- (int)getLargestPoolSize;
- (int)getActiveCount;
- (int)getPoolSize;
- (void)purge;
- (BOOL)removeWithJavaLangRunnable:(id)arg1;
- (id)getQueue;
- (long long)getKeepAliveTimeWithJavaUtilConcurrentTimeUnitEnum:(id)arg1;
- (void)setKeepAliveTimeWithLong:(long long)arg1 withJavaUtilConcurrentTimeUnitEnum:(id)arg2;
- (int)getMaximumPoolSize;
- (void)setMaximumPoolSizeWithInt:(int)arg1;
- (void)allowCoreThreadTimeOutWithBoolean:(BOOL)arg1;
- (BOOL)allowsCoreThreadTimeOut;
- (int)prestartAllCoreThreads;
- (void)ensurePrestart;
- (BOOL)prestartCoreThread;
- (int)getCorePoolSize;
- (void)setCorePoolSizeWithInt:(int)arg1;
- (id)getRejectedExecutionHandler;
- (void)setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:(id)arg1;
- (id)getThreadFactory;
- (void)setThreadFactoryWithJavaUtilConcurrentThreadFactory:(id)arg1;
- (void)dealloc;
- (BOOL)awaitTerminationWithLong:(long long)arg1 withJavaUtilConcurrentTimeUnitEnum:(id)arg2;
- (BOOL)isTerminated;
- (BOOL)isTerminating;
- (BOOL)isShutdown;
- (id)shutdownNow;
- (void)shutdown;
- (void)executeWithJavaLangRunnable:(id)arg1;
- (id)initWithInt:(int)arg1 withInt:(int)arg2 withLong:(long long)arg3 withJavaUtilConcurrentTimeUnitEnum:(id)arg4 withJavaUtilConcurrentBlockingQueue:(id)arg5 withJavaUtilConcurrentThreadFactory:(id)arg6 withJavaUtilConcurrentRejectedExecutionHandler:(id)arg7;
- (id)initWithInt:(int)arg1 withInt:(int)arg2 withLong:(long long)arg3 withJavaUtilConcurrentTimeUnitEnum:(id)arg4 withJavaUtilConcurrentBlockingQueue:(id)arg5 withJavaUtilConcurrentRejectedExecutionHandler:(id)arg6;
- (id)initWithInt:(int)arg1 withInt:(int)arg2 withLong:(long long)arg3 withJavaUtilConcurrentTimeUnitEnum:(id)arg4 withJavaUtilConcurrentBlockingQueue:(id)arg5 withJavaUtilConcurrentThreadFactory:(id)arg6;
- (id)initWithInt:(int)arg1 withInt:(int)arg2 withLong:(long long)arg3 withJavaUtilConcurrentTimeUnitEnum:(id)arg4 withJavaUtilConcurrentBlockingQueue:(id)arg5;
- (void)runTaskWithJavaLangRunnable:(id)arg1;
- (void)runWorkerWithJavaUtilConcurrentThreadPoolExecutor_Worker:(id)arg1;
- (id)getTask;
- (void)processWorkerExitWithJavaUtilConcurrentThreadPoolExecutor_Worker:(id)arg1 withBoolean:(BOOL)arg2;
- (void)addWorkerFailedWithJavaUtilConcurrentThreadPoolExecutor_Worker:(id)arg1;
- (BOOL)addWorkerWithJavaLangRunnable:(id)arg1 withBoolean:(BOOL)arg2;
- (id)drainQueue;
- (BOOL)isRunningOrShutdownWithBoolean:(BOOL)arg1;
- (void)onShutdown;
- (void)rejectWithJavaLangRunnable:(id)arg1;
- (void)interruptIdleWorkers;
- (void)interruptIdleWorkersWithBoolean:(BOOL)arg1;
- (void)interruptWorkers;
- (void)checkShutdownAccess;
- (void)tryTerminate;
- (void)advanceRunStateWithInt:(int)arg1;
- (void)decrementWorkerCount;
- (BOOL)compareAndDecrementWorkerCountWithInt:(int)arg1;
- (BOOL)compareAndIncrementWorkerCountWithInt:(int)arg1;

@end

