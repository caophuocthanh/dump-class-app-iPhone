//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "UIViewController.h"

#import "UIActionSheetDelegate.h"
#import "UIAlertViewDelegate.h"
#import "UIWebViewDelegate.h"

@class GIPResourceLoader, GIPWebView, GIPWebViewHistory, NSString, NSURL, NSURLRequest, UIActionSheet, UIActivityIndicatorView, UIAlertView, UIBarButtonItem, UIColor, UIToolbar;

@interface GIPWebViewController : UIViewController <UIAlertViewDelegate, UIActionSheetDelegate, UIWebViewDelegate>
{
    id <GIPWebViewControllerDelegate> delegate_;
    GIPWebView *webView_;
    UIBarButtonItem *backItem_;
    UIBarButtonItem *forwardItem_;
    UIBarButtonItem *safariItem_;
    UIBarButtonItem *externalBrowserItem_;
    UIBarButtonItem *reloadItem_;
    UIToolbar *internalToolbar_;
    UIActivityIndicatorView *spinner_;
    BOOL detectExternalURLs_;
    BOOL showSpinnerInToolbar_;
    BOOL showsSpinner_;
    BOOL showsToolbar_;
    BOOL alwaysEnableBackButton_;
    BOOL usePageTitleAsViewTitle_;
    BOOL rewriteNewWindowLinks_;
    BOOL showErrorPageOnLoadFail_;
    BOOL showsOpenInSafariInToolbar_;
    BOOL showPromptWhenOpeningSafari_;
    UIAlertView *openInSafariPrompt_;
    NSURL *openInSafariURL_;
    BOOL allowBrowserSelection_;
    BOOL shouldShowChromeDownloadOption_;
    int maxDownloadChromeImpressions_;
    UIActionSheet *openInBrowserActionSheet_;
    int safariButtonIndex_;
    int chromeButtonIndex_;
    int copyLinkButtonIndex_;
    BOOL showingChromeDownloadOption_;
    NSURL *callbackURL_;
    BOOL createNewTab_;
    NSURL *currentURL_;
    NSString *currentPageTitle_;
    BOOL webViewLoaded_;
    NSURLRequest *initialRequest_;
    int numberOfItemsLoading_;
    GIPWebViewHistory *history_;
    id <GIPWebViewToolbarProtocol> toolbar_;
    struct CGRect webViewFrame_;
    GIPResourceLoader *loader_;
    Class webViewClass_;
    unsigned int cachePolicy_;
    double timeoutInterval_;
    UIColor *toolbarColor_;
    BOOL clearHistoryOnLoad_;
    BOOL shouldAutorotate_;
    BOOL _disableDefaultDialerRequestHandling;
    NSURL *failedURL_;
    UIColor *toolbarButtonTintColor_;
    unsigned int supportedInterfaceOrientations_;
    int minimumAgeForURLs_;
}

+ (BOOL)URLValidForSafari:(id)arg1;
@property(nonatomic) BOOL disableDefaultDialerRequestHandling; // @synthesize disableDefaultDialerRequestHandling=_disableDefaultDialerRequestHandling;
@property(nonatomic) int minimumAgeForURLs; // @synthesize minimumAgeForURLs=minimumAgeForURLs_;
@property(nonatomic) unsigned int supportedInterfaceOrientations; // @synthesize supportedInterfaceOrientations=supportedInterfaceOrientations_;
@property(nonatomic) BOOL shouldAutorotate; // @synthesize shouldAutorotate=shouldAutorotate_;
@property(nonatomic) BOOL clearHistoryOnLoad; // @synthesize clearHistoryOnLoad=clearHistoryOnLoad_;
@property(retain, nonatomic) UIColor *toolbarButtonTintColor; // @synthesize toolbarButtonTintColor=toolbarButtonTintColor_;
@property(retain, nonatomic) UIColor *toolbarColor; // @synthesize toolbarColor=toolbarColor_;
@property(nonatomic) double timeoutInterval; // @synthesize timeoutInterval=timeoutInterval_;
@property(nonatomic) unsigned int cachePolicy; // @synthesize cachePolicy=cachePolicy_;
@property(readonly, nonatomic) BOOL webViewLoaded; // @synthesize webViewLoaded=webViewLoaded_;
@property(retain, nonatomic) GIPWebView *webView; // @synthesize webView=webView_;
@property(nonatomic) BOOL usePageTitleAsViewTitle; // @synthesize usePageTitleAsViewTitle=usePageTitleAsViewTitle_;
@property(nonatomic) id <GIPWebViewToolbarProtocol> toolbar; // @synthesize toolbar=toolbar_;
@property(nonatomic) BOOL showsOpenInSafariInToolbar; // @synthesize showsOpenInSafariInToolbar=showsOpenInSafariInToolbar_;
@property(nonatomic) BOOL showsToolbar; // @synthesize showsToolbar=showsToolbar_;
@property(nonatomic) BOOL showsSpinner; // @synthesize showsSpinner=showsSpinner_;
@property(nonatomic) BOOL showSpinnerInToolbar; // @synthesize showSpinnerInToolbar=showSpinnerInToolbar_;
@property(nonatomic) int maxDownloadChromeImpressions; // @synthesize maxDownloadChromeImpressions=maxDownloadChromeImpressions_;
@property(nonatomic) BOOL shouldShowChromeDownloadOption; // @synthesize shouldShowChromeDownloadOption=shouldShowChromeDownloadOption_;
@property(nonatomic) BOOL allowBrowserSelection; // @synthesize allowBrowserSelection=allowBrowserSelection_;
@property(nonatomic) BOOL showPromptWhenOpeningSafari; // @synthesize showPromptWhenOpeningSafari=showPromptWhenOpeningSafari_;
@property(nonatomic) BOOL showErrorPageOnLoadFail; // @synthesize showErrorPageOnLoadFail=showErrorPageOnLoadFail_;
@property(nonatomic) BOOL rewriteNewWindowLinks; // @synthesize rewriteNewWindowLinks=rewriteNewWindowLinks_;
@property(retain, nonatomic) NSURL *openInSafariURL; // @synthesize openInSafariURL=openInSafariURL_;
@property(readonly, nonatomic) int numberOfItemsLoading; // @synthesize numberOfItemsLoading=numberOfItemsLoading_;
@property(retain, nonatomic) NSURLRequest *initialRequest; // @synthesize initialRequest=initialRequest_;
@property(retain, nonatomic) GIPWebViewHistory *history; // @synthesize history=history_;
@property(retain, nonatomic) NSURL *failedURL; // @synthesize failedURL=failedURL_;
@property(nonatomic) BOOL detectExternalURLs; // @synthesize detectExternalURLs=detectExternalURLs_;
@property(nonatomic) id <GIPWebViewControllerDelegate> delegate; // @synthesize delegate=delegate_;
@property(retain, nonatomic) NSURL *currentURL; // @synthesize currentURL=currentURL_;
@property(copy, nonatomic) NSString *currentPageTitle; // @synthesize currentPageTitle=currentPageTitle_;
@property(nonatomic) BOOL createNewTab; // @synthesize createNewTab=createNewTab_;
@property(retain, nonatomic) NSURL *callbackURL; // @synthesize callbackURL=callbackURL_;
- (void)applyToolbarButtonTintColor;
- (void)openExternalURL:(id)arg1;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(int)arg2;
- (void)actionSheet:(id)arg1 clickedButtonAtIndex:(int)arg2;
- (void)showBrowserSelectionPrompt;
- (void)showOpenInSafariPrompt;
- (void)openURLInSafari:(id)arg1;
- (void)resetChromeDownloadOptionImpressions;
- (void)didShowChromeDownloadOption;
- (BOOL)shouldDisplayExternalBrowserSelection;
- (id)appStoreURLForChrome;
- (id)convertURLToChrome:(id)arg1;
- (BOOL)isChromeInstalled;
- (void)displayErrorMessage:(id)arg1 withReload:(BOOL)arg2;
- (void)hideSpinner;
- (void)showSpinner;
- (void)updateSpinnerFrame;
- (id)spinner;
- (void)didReceiveMemoryWarning;
- (void)didRotateFromInterfaceOrientation:(int)arg1;
- (void)openInSafari;
- (id)safariURL;
- (void)goForward;
- (void)goBack;
- (void)reload;
- (void)emptyPage;
- (void)callDidExhaustHistoryStack;
- (BOOL)shouldCallDidExhaustHistoryStack;
- (id)getPageTitle;
- (void)addURLToHistory:(id)arg1;
- (void)recordCurrentRequestInHistory;
- (void)webView:(id)arg1 didFailLoadWithError:(id)arg2;
- (void)webViewDidFinishLoad:(id)arg1;
- (void)webViewDidStartLoad:(id)arg1;
- (BOOL)webView:(id)arg1 shouldStartLoadWithRequest:(id)arg2 navigationType:(int)arg3;
- (void)loadRequest:(id)arg1;
- (void)loadURL:(id)arg1;
- (void)loadHTML:(id)arg1 baseURL:(id)arg2;
- (id)createWebViewIfNeeded;
- (void)showsOpenInSafariInToolbar:(BOOL)arg1;
- (struct CGRect)toolbarFrame;
@property(nonatomic) struct CGRect webViewFrame;
- (void)updateLaunchButton:(BOOL)arg1;
- (void)updateToolbarState;
- (void)setSafariButtonEnabled:(BOOL)arg1;
- (void)setReloadButtonEnabled:(BOOL)arg1;
- (void)setForwardButtonEnabled:(BOOL)arg1;
- (void)setBackButtonEnabled:(BOOL)arg1;
- (void)unloadToolbar;
- (void)loadToolbar;
- (id)makeInternalToolbar;
- (void)viewWillDisappear:(BOOL)arg1;
- (void)loadView;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 loader:(id)arg2 webViewClass:(Class)arg3 clearHistoryOnLoad:(BOOL)arg4;
- (id)initWithDelegate:(id)arg1 loader:(id)arg2 webViewClass:(Class)arg3;
- (id)initWithDelegate:(id)arg1 loader:(id)arg2;
- (id)initWithDelegate:(id)arg1 webViewClass:(Class)arg2;
- (id)initWithDelegate:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

