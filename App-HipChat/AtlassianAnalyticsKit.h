//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class AAKAnalyticsProduct, AAKEventStorage, AAKEventValidator, AAKNetworking, NSObject<OS_dispatch_queue>, NSTimer, NSURL;

@interface AtlassianAnalyticsKit : NSObject
{
    BOOL _debug;
    BOOL _logging;
    unsigned int _minimumDispatchBatchSize;
    unsigned int _dispatchBatchSize;
    id <AtlassianAnalyticsKitDelegate> _delegate;
    NSURL *_apiUrl;
    AAKEventStorage *_eventStorage;
    AAKEventStorage *_pendingEventStorage;
    AAKEventValidator *_validator;
    AAKAnalyticsProduct *_product;
    AAKNetworking *_networking;
    NSTimer *_dispatchTimer;
    NSObject<OS_dispatch_queue> *_timerQueue;
    double _dispatchInterval;
}

@property(retain, nonatomic) NSObject<OS_dispatch_queue> *timerQueue; // @synthesize timerQueue=_timerQueue;
@property(nonatomic) __weak NSTimer *dispatchTimer; // @synthesize dispatchTimer=_dispatchTimer;
@property(retain, nonatomic) AAKNetworking *networking; // @synthesize networking=_networking;
@property(retain, nonatomic) AAKAnalyticsProduct *product; // @synthesize product=_product;
@property(retain, nonatomic) AAKEventValidator *validator; // @synthesize validator=_validator;
@property(retain, nonatomic) AAKEventStorage *pendingEventStorage; // @synthesize pendingEventStorage=_pendingEventStorage;
@property(retain, nonatomic) AAKEventStorage *eventStorage; // @synthesize eventStorage=_eventStorage;
@property(retain, nonatomic) NSURL *apiUrl; // @synthesize apiUrl=_apiUrl;
@property(nonatomic) __weak id <AtlassianAnalyticsKitDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) unsigned int dispatchBatchSize; // @synthesize dispatchBatchSize=_dispatchBatchSize;
@property(nonatomic) unsigned int minimumDispatchBatchSize; // @synthesize minimumDispatchBatchSize=_minimumDispatchBatchSize;
@property(readonly, nonatomic) double dispatchInterval; // @synthesize dispatchInterval=_dispatchInterval;
@property(nonatomic) BOOL logging; // @synthesize logging=_logging;
@property(nonatomic) BOOL debug; // @synthesize debug=_debug;
- (void).cxx_destruct;
- (void)fetchNumberOfEvents:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2;
- (id)eventsPayloadForEvents:(id)arg1;
- (void)refreshDispatchTimer;
- (void)notifyFailure:(id)arg1;
- (void)deleteEvents:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)deleteEventsAndNotify:(id)arg1;
- (void)movePendingEventsBackToEventStorage;
- (void)deletePendingEvents:(id)arg1;
- (void)addPendingEvents:(id)arg1;
- (void)dispatchEvents:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)flushQueue:(id)arg1 batchSize:(unsigned int)arg2 completion:(CDUnknownBlockType)arg3;
- (void)flushQueue:(id)arg1;
- (void)trackStoredEventsWithCompletion:(CDUnknownBlockType)arg1;
- (void)numberOfEventsInQueue:(CDUnknownBlockType)arg1;
- (void)trackEvent:(id)arg1 user:(id)arg2 session:(id)arg3 sen:(id)arg4 atlPath:(id)arg5 properties:(id)arg6 completion:(CDUnknownBlockType)arg7;
- (void)trackEvent:(id)arg1 user:(id)arg2 session:(id)arg3 sen:(id)arg4 atlPath:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (void)trackEvent:(id)arg1 user:(id)arg2 session:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)dealloc;
- (id)initWithProduct:(id)arg1 dispatchInterval:(double)arg2 apiUrl:(id)arg3;
- (id)initWithProduct:(id)arg1 dispatchInterval:(double)arg2;
- (id)init;

@end

