//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "PSPDFApplicationJSExport.h"
#import "PSPDFOverridable.h"
#import "PSPDFUndoProtocol.h"

@class NSData, NSDictionary, NSIndexSet, NSMutableArray, NSMutableDictionary, NSObject<OS_dispatch_queue>, NSRecursiveLock, NSString, NSURL, PSPDFAnnotationManager, PSPDFDocument, PSPDFDocumentParser, PSPDFEmbeddedFilesParser, PSPDFFormParser, PSPDFLabelParser, PSPDFOutlineParser, PSPDFThreadSafeMutableDictionary;

@interface PSPDFDocumentProvider : NSObject <PSPDFApplicationJSExport, PSPDFUndoProtocol, PSPDFOverridable>
{
    struct {
        unsigned int parsed:1;
        unsigned int documentRefIsUnlocked:1;
        unsigned int allowAnnotationsChanges:1;
        unsigned int allowAnnotationsChangesRuleIsEvaluated:1;
        unsigned int canEmbedAnnotations:1;
    } _flags;
    struct _opaque_pthread_mutex_t _documentParsingLock;
    int _outlineParserLock;
    int _formParserLock;
    int _labelParserLock;
    int _filesParserLock;
    NSRecursiveLock *_annotationManagerLock;
    NSMutableArray *_ownerArray;
    BOOL _allowsPrinting;
    BOOL _isEncrypted;
    BOOL _isLocked;
    BOOL _allowsCopying;
    BOOL _checkIfFileExists;
    BOOL _ignoreLocking;
    BOOL _needsFlushing;
    BOOL _documentCreationFailed;
    NSURL *_fileURL;
    unsigned int _pageCount;
    PSPDFDocumentParser *_documentParser;
    PSPDFOutlineParser *_outlineParser;
    PSPDFAnnotationManager *_annotationManager;
    PSPDFLabelParser *_labelParser;
    NSString *_title;
    NSData *_data;
    struct CGDataProvider *_dataProvider;
    PSPDFDocument *_document;
    id <PSPDFDocumentProviderDelegate> _delegate;
    NSString *_password;
    NSData *_contentSignature;
    PSPDFFormParser *_formParser;
    PSPDFEmbeddedFilesParser *_embeddedFilesParser;
    id <PSPDFFileManager> _fileManager;
    NSIndexSet *_pageRange;
    NSRecursiveLock *_documentLock;
    NSObject<OS_dispatch_queue> *_pageInfoQueue;
    NSObject<OS_dispatch_queue> *_textParserCacheQueue;
    NSObject<OS_dispatch_queue> *_textParserParseQueue;
    NSMutableDictionary *_openPages;
    NSMutableDictionary *_textParsers;
    NSMutableDictionary *_pageInfoCache;
    struct CGPDFDocument *_documentRef;
    int _documentRefRetainCount;
    PSPDFThreadSafeMutableDictionary *_fontCache;
    NSDictionary *_metadata;
    id <PSPDFJavascriptRuntimeProvider> _javaScriptRuntime;
}

+ (id)keysForValuesToObserveForUndo;
+ (id)documentLevelJavaScriptsForDocumentProvider:(id)arg1;
@property(retain, nonatomic) id <PSPDFJavascriptRuntimeProvider> javaScriptRuntime; // @synthesize javaScriptRuntime=_javaScriptRuntime;
@property(copy, nonatomic) NSDictionary *metadata; // @synthesize metadata=_metadata;
@property(retain, nonatomic) PSPDFThreadSafeMutableDictionary *fontCache; // @synthesize fontCache=_fontCache;
@property(nonatomic) int documentRefRetainCount; // @synthesize documentRefRetainCount=_documentRefRetainCount;
@property struct CGPDFDocument *documentRef; // @synthesize documentRef=_documentRef;
@property BOOL documentCreationFailed; // @synthesize documentCreationFailed=_documentCreationFailed;
@property BOOL needsFlushing; // @synthesize needsFlushing=_needsFlushing;
@property(retain, nonatomic) NSMutableDictionary *pageInfoCache; // @synthesize pageInfoCache=_pageInfoCache;
@property(retain, nonatomic) NSMutableDictionary *textParsers; // @synthesize textParsers=_textParsers;
@property(retain, nonatomic) NSMutableDictionary *openPages; // @synthesize openPages=_openPages;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *textParserParseQueue; // @synthesize textParserParseQueue=_textParserParseQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *textParserCacheQueue; // @synthesize textParserCacheQueue=_textParserCacheQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *pageInfoQueue; // @synthesize pageInfoQueue=_pageInfoQueue;
@property(retain, nonatomic) NSRecursiveLock *documentLock; // @synthesize documentLock=_documentLock;
@property(nonatomic) BOOL ignoreLocking; // @synthesize ignoreLocking=_ignoreLocking;
@property(copy, nonatomic) NSIndexSet *pageRange; // @synthesize pageRange=_pageRange;
@property(nonatomic) BOOL checkIfFileExists; // @synthesize checkIfFileExists=_checkIfFileExists;
@property(readonly, nonatomic) id <PSPDFFileManager> fileManager; // @synthesize fileManager=_fileManager;
@property(retain, nonatomic) PSPDFEmbeddedFilesParser *embeddedFilesParser; // @synthesize embeddedFilesParser=_embeddedFilesParser;
@property(retain, nonatomic) PSPDFFormParser *formParser; // @synthesize formParser=_formParser;
@property(copy, nonatomic) NSData *contentSignature; // @synthesize contentSignature=_contentSignature;
@property(copy, nonatomic) NSString *password; // @synthesize password=_password;
@property(nonatomic) __weak id <PSPDFDocumentProviderDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) __weak PSPDFDocument *document; // @synthesize document=_document;
@property(readonly, nonatomic) struct CGDataProvider *dataProvider; // @synthesize dataProvider=_dataProvider;
@property(retain, nonatomic) NSData *data; // @synthesize data=_data;
@property(retain, nonatomic) PSPDFLabelParser *labelParser; // @synthesize labelParser=_labelParser;
@property(retain, nonatomic) PSPDFAnnotationManager *annotationManager; // @synthesize annotationManager=_annotationManager;
@property(retain, nonatomic) PSPDFOutlineParser *outlineParser; // @synthesize outlineParser=_outlineParser;
@property(retain, nonatomic) PSPDFDocumentParser *documentParser; // @synthesize documentParser=_documentParser;
@property(readonly, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)undoController;
- (void)destroy;
- (void)parseDocumentPropertiesWithDocumentRef:(struct CGPDFDocument *)arg1;
- (void)parseDocumentLockProperties;
- (void)ensureDocumentIsParsed;
- (void)didReceiveMemoryWarning;
- (id)URLForTokenizedPath:(id)arg1;
- (id)resolveTokenizedPath:(id)arg1 alwaysLocal:(BOOL)arg2;
- (BOOL)writeToFile:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) NSString *XMPMetadata;
@property(readonly, nonatomic) BOOL allowAnnotationChanges;
@property(readonly, nonatomic) BOOL allowsPrinting; // @synthesize allowsPrinting=_allowsPrinting;
@property(readonly, nonatomic) BOOL allowsCopying; // @synthesize allowsCopying=_allowsCopying;
- (BOOL)saveAnnotationsWithOptions:(id)arg1 error:(id *)arg2;
@property(readonly, nonatomic) BOOL canEmbedAnnotations;
- (unsigned int)pageCountUnfiltered;
@property(readonly, nonatomic) unsigned int pageCount; // @synthesize pageCount=_pageCount;
- (unsigned int)firstPageIndex;
- (unsigned int)translateRealPageToCappedPage:(unsigned int)arg1;
- (unsigned int)translateCappedPageToRealPage:(unsigned int)arg1;
- (unsigned int)translateCappedPageNumberToRealPageNumber:(unsigned int)arg1;
@property(readonly, nonatomic) BOOL isEncrypted; // @synthesize isEncrypted=_isEncrypted;
- (BOOL)isLockedAndTryToUnlock:(BOOL)arg1;
@property(readonly, nonatomic) BOOL isLocked; // @synthesize isLocked=_isLocked;
- (BOOL)unlockWithPassword:(id)arg1;
- (void)setupDocumentParserIfRequired;
@property(readonly, nonatomic) BOOL isDocumentParserLoaded;
- (void)destroyAnnotationManager;
- (void)clearAllTextParsers;
- (id)textParserForPage:(unsigned int)arg1;
- (BOOL)hasLoadedTextParserForPage:(unsigned int)arg1;
- (unsigned int)pageOffsetForDocument;
@property(readonly, copy, nonatomic) NSString *encryptionFilter;
@property(readonly, copy, nonatomic) NSString *title; // @synthesize title=_title;
@property(readonly, nonatomic, getter=isMetadataLoaded) BOOL metadataLoaded;
- (void)parseMetadataIfNeeded;
@property(readonly, nonatomic) unsigned long long fileSize;
- (id)dataRepresentationWithError:(id *)arg1;
- (void)setPageInfo:(id)arg1 forPage:(unsigned int)arg2;
- (id)pageInfoForPageNoFetching:(unsigned int)arg1;
- (struct CGRect)boxRect:(int)arg1 forPageRef:(struct CGPDFPage *)arg2 error:(id *)arg3;
- (struct CGRect)boxRect:(int)arg1 forPage:(unsigned int)arg2 error:(id *)arg3;
- (id)pageInfoForPage:(unsigned int)arg1 pageRef:(struct CGPDFPage *)arg2 error:(id *)arg3;
- (id)pageInfoForPage:(unsigned int)arg1;
- (void)fillPageInfoCache;
@property(readonly, nonatomic) BOOL hasOpenDocumentRef;
- (void)releasePageRef:(struct CGPDFPage *)arg1;
- (struct CGPDFPage *)requestPageRefForPageNumber:(unsigned int)arg1 error:(id *)arg2;
- (void)iterateOverPageRef:(CDUnknownBlockType)arg1;
- (void)performBlockForPageNumber:(unsigned int)arg1 block:(CDUnknownBlockType)arg2;
- (void)performBlockWithDocumentRef:(CDUnknownBlockType)arg1;
- (BOOL)flushDocumentReference;
- (void)releaseDocumentRef:(struct CGPDFDocument *)arg1 owner:(id)arg2;
- (struct CGPDFDocument *)requestDocumentRefWithOwner:(id)arg1;
- (BOOL)sourceIsAFileURLAndFileExists;
- (BOOL)localFileIsMissing;
- (BOOL)fileIsPDF;
- (BOOL)needToCloseOpenDocumentRequests;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (BOOL)isEqual:(id)arg1;
@property(readonly) unsigned int hash;
- (id)initWithDataProvider:(struct CGDataProvider *)arg1 document:(id)arg2;
- (id)initWithData:(id)arg1 document:(id)arg2;
- (id)initWithFileURL:(id)arg1 document:(id)arg2;
- (id)initWithDocument:(id)arg1;
- (Class)classForClass:(Class)arg1;
- (BOOL)updateCalculatedFieldsDependingOnForm:(id)arg1 error:(id *)arg2;
- (id)executeFormatActionWithActionContainer:(id)arg1 application:(id)arg2 eventParams:(id)arg3 error:(id *)arg4;
- (id)executeValueChangedJSActionSequenceWithActionContainer:(id)arg1 application:(id)arg2 eventParams:(id)arg3 error:(id *)arg4;
- (BOOL)isCalculateEventBatchInProgress;
- (void)endCalculateActionEventBatch;
- (void)beginCalculateActionEventBatch;
- (id)executeJSPDFAction:(id)arg1 application:(id)arg2 eventParams:(id)arg3 actionContainer:(id)arg4 error:(id *)arg5;
- (int)buttonImportIcon:(id)arg1 page:(id)arg2 sourceForm:(id)arg3;
- (void)launchURL:(id)arg1 newFrame:(id)arg2;
- (void)mailDoc:(id)arg1;
- (void)resetForm:(id)arg1;
- (void)print:(id)arg1;
- (void)alert:(id)arg1;
@property(nonatomic) unsigned int pageNum;
- (id)getField:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

