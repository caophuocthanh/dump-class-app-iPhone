//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "HCCachedData.h"

#import "PresenceRequestorDelegate.h"

@class AccountContext, GCDMulticastDelegate<RosterDelegate>, NSDate, NSMutableSet, NSString, ThreadSafeArray, ThreadSafeDictionary;

@interface Roster : HCCachedData <PresenceRequestorDelegate>
{
    BOOL _readyForPresence;
    BOOL _presenceFinishedLoading;
    BOOL _presenceFetchScheduled;
    NSString *_presenceRequestId;
    GCDMulticastDelegate<RosterDelegate> *_multicastDelegate;
    ThreadSafeArray *_earlyPresences;
    NSMutableSet *_pendingPresenceFetchJids;
    NSString *_rosterRequestId;
    AccountContext *_accountContext;
    ThreadSafeDictionary *_mentionKeyedRoster;
    ThreadSafeDictionary *_nicknameMap;
    ThreadSafeDictionary *_displayNames;
    NSDate *_rosterFetchStartDate;
}

@property(retain, nonatomic) NSDate *rosterFetchStartDate; // @synthesize rosterFetchStartDate=_rosterFetchStartDate;
@property(retain, nonatomic) ThreadSafeDictionary *displayNames; // @synthesize displayNames=_displayNames;
@property(retain, nonatomic) ThreadSafeDictionary *nicknameMap; // @synthesize nicknameMap=_nicknameMap;
@property(retain, nonatomic) ThreadSafeDictionary *mentionKeyedRoster; // @synthesize mentionKeyedRoster=_mentionKeyedRoster;
@property(nonatomic) __weak AccountContext *accountContext; // @synthesize accountContext=_accountContext;
@property(nonatomic) BOOL presenceFetchScheduled; // @synthesize presenceFetchScheduled=_presenceFetchScheduled;
@property(nonatomic) BOOL presenceFinishedLoading; // @synthesize presenceFinishedLoading=_presenceFinishedLoading;
@property(copy, nonatomic) NSString *rosterRequestId; // @synthesize rosterRequestId=_rosterRequestId;
@property(retain, nonatomic) NSMutableSet *pendingPresenceFetchJids; // @synthesize pendingPresenceFetchJids=_pendingPresenceFetchJids;
@property(nonatomic) BOOL readyForPresence; // @synthesize readyForPresence=_readyForPresence;
@property(retain, nonatomic) ThreadSafeArray *earlyPresences; // @synthesize earlyPresences=_earlyPresences;
@property(retain, nonatomic) GCDMulticastDelegate<RosterDelegate> *multicastDelegate; // @synthesize multicastDelegate=_multicastDelegate;
@property(copy, nonatomic) NSString *presenceRequestId; // @synthesize presenceRequestId=_presenceRequestId;
- (void).cxx_destruct;
- (id)getSenderForMessage:(id)arg1;
- (id)jidForNickname:(id)arg1;
- (id)getDisplayName:(id)arg1;
- (void)setDisplayNameForJid:(id)arg1 withFullName:(id)arg2 displayName:(id)arg3 forceUpdate:(BOOL)arg4;
- (void)forceSetDisplayName:(id)arg1 forJid:(id)arg2;
- (void)setDisplayName:(id)arg1 forJid:(id)arg2;
- (void)updateDisplayNamesWithMessage:(id)arg1;
- (void)presenceFinishedLoadingForAllUsers;
- (void)presenceFinishedLoadingForUserIds:(id)arg1;
- (void)updatePresenceToOfflineForUser:(id)arg1;
- (void)updateUnavailablePresencesOfUsersToOfflineForUIDs:(id)arg1;
- (BOOL)triggerLoadedEventsForIqId:(id)arg1;
- (BOOL)triggerLoadedEventsForRosterRequest;
- (void)processEarlyPresences;
- (BOOL)triggerLoadedEventsForPresenceRequest;
- (BOOL)loadFromStore;
- (id)handleRosterItem:(id)arg1 withNotifications:(BOOL)arg2;
- (void)handlePresence:(id)arg1;
- (BOOL)hasRoster;
- (id)findUserByEmail:(id)arg1;
- (id)findUserByMention:(id)arg1;
- (id)findUserByJid:(id)arg1;
- (id)userForBareJid:(id)arg1;
- (id)storeName;
- (void)requestPresences;
- (BOOL)rosterItemsHaveAllRequiredFields;
- (void)fetchWithVersion:(id)arg1;
- (void)fetchRoster;
- (void)clearData;
- (void)cleanupOnDisconnect;
- (void)onSessionWentOfflineEvent:(id)arg1;
- (void)onSessionDisconnectedEvent:(id)arg1;
- (void)onPresenceChangedEvent:(id)arg1;
- (void)xmppStream:(id)arg1 didReceiveMessage:(id)arg2;
- (BOOL)xmppStream:(id)arg1 didReceiveIQ:(id)arg2;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1 delegateQueue:(id)arg2;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (BOOL)storeUsesSharedDefaults;
- (Class)objectClass;
- (id)generateObjectWithData:(id)arg1;
- (id)initWithAccountContext:(id)arg1;
- (id)init;

@end

