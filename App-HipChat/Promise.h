//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSMutableArray, NSObject<OS_dispatch_queue>, NSOperationQueue;

@interface Promise : NSObject
{
    NSOperationQueue *_operationQueue;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    CDUnknownBlockType _resolverBlock;
    long _syncQueueCreate;
    NSObject<OS_dispatch_queue> *_syncQueue;
    NSMutableArray *_handlers;
    id _value;
}

+ (id)promiseSpliceWithArray:(id)arg1;
+ (id)withValue:(id)arg1;
+ (id)withReturn:(CDUnknownBlockType)arg1;
+ (id)onCurrentWithReturn:(CDUnknownBlockType)arg1;
+ (id)onBackgroundWithReturn:(CDUnknownBlockType)arg1;
+ (id)onDispatchQueue:(id)arg1 withReturn:(CDUnknownBlockType)arg2;
+ (id)onOperationQueue:(id)arg1 withReturn:(CDUnknownBlockType)arg2;
+ (CDUnknownBlockType)asCallback:(CDUnknownBlockType)arg1;
+ (id)withCallback:(CDUnknownBlockType)arg1;
+ (id)onCurrentWithCallback:(CDUnknownBlockType)arg1;
+ (id)onBackgroundWithCallback:(CDUnknownBlockType)arg1;
+ (id)onDispatchQueue:(id)arg1 withCallback:(CDUnknownBlockType)arg2;
+ (id)onOperationQueue:(id)arg1 withCallback:(CDUnknownBlockType)arg2;
+ (id)backgroundQueue;
+ (id)convertToPromises:(id)arg1;
+ (id)with:(id)arg1 operation:(id)arg2 dispatch:(id)arg3 join:(id)arg4;
+ (id)dispatchOn:(id)arg1 join:(id)arg2;
+ (id)operationOn:(id)arg1 join:(id)arg2;
+ (id)joinOnBackground:(id)arg1;
+ (id)joinOnSame:(id)arg1;
+ (id)join:(id)arg1;
+ (id)with:(id)arg1 operation:(id)arg2 dispatch:(id)arg3 race:(id)arg4;
+ (id)dispatchOn:(id)arg1 race:(id)arg2;
+ (id)operationOn:(id)arg1 race:(id)arg2;
+ (id)raceOnBackground:(id)arg1;
+ (id)raceOnSame:(id)arg1;
+ (id)race:(id)arg1;
+ (id)with:(id)arg1 operation:(id)arg2 dispatch:(id)arg3 all:(id)arg4;
+ (id)dispatchOn:(id)arg1 all:(id)arg2;
+ (id)operationOn:(id)arg1 all:(id)arg2;
+ (id)allOnBackground:(id)arg1;
+ (id)allOnSame:(id)arg1;
+ (id)all:(id)arg1;
@property(retain, nonatomic) id value; // @synthesize value=_value;
@property(retain, nonatomic) NSMutableArray *handlers; // @synthesize handlers=_handlers;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *syncQueue; // @synthesize syncQueue=_syncQueue;
@property(readonly, nonatomic) long syncQueueCreate; // @synthesize syncQueueCreate=_syncQueueCreate;
@property(readonly, copy, nonatomic) CDUnknownBlockType resolverBlock; // @synthesize resolverBlock=_resolverBlock;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue; // @synthesize dispatchQueue=_dispatchQueue;
@property(readonly, nonatomic) NSOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
- (void).cxx_destruct;
- (id)actualValue;
- (BOOL)rejected;
- (BOOL)fulfilled;
- (BOOL)resolved;
- (BOOL)pending;
- (void)notifyHandlers;
- (void)addHandler:(CDUnknownBlockType)arg1;
- (id)getHandlers;
- (id)queueCreatingQueue;
- (void)resolveWith:(id)arg1;
- (CDUnknownBlockType)createPromiseResolver;
- (void)doResolvePromise;
- (id)schedule;
- (id)resolvePromise;
- (void)resolvePromiseWith:(CDUnknownBlockType)arg1;
- (id)initWithDispatchQueue:(id)arg1;
- (id)initWithOperationQueue:(id)arg1;
- (id)initWithOperationQueue:(id)arg1 dispatchQueue:(id)arg2 callback:(CDUnknownBlockType)arg3;
- (id)backgroundQueue;
- (void)finallyDispatchOn:(id)arg1 block:(id)arg2;
- (CDUnknownBlockType)finallyDispatchOn;
- (void)finallyOperationOn:(id)arg1 block:(id)arg2;
- (CDUnknownBlockType)finallyOperationOn;
- (void)finallyOnBackground:(id)arg1;
- (CDUnknownBlockType)finallyOnBackground;
- (void)finallyOnSame:(id)arg1;
- (CDUnknownBlockType)finallyOnSame;
- (void)finally:(id)arg1;
- (CDUnknownBlockType)finally;
- (id)alwaysDispatchOn:(id)arg1 block:(id)arg2;
- (CDUnknownBlockType)alwaysDispatchOn;
- (id)alwaysOperationOn:(id)arg1 block:(id)arg2;
- (CDUnknownBlockType)alwaysOperationOn;
- (id)alwaysOnBackground:(id)arg1;
- (CDUnknownBlockType)alwaysOnBackground;
- (id)alwaysOnSame:(id)arg1;
- (CDUnknownBlockType)alwaysOnSame;
- (id)always:(id)arg1;
- (CDUnknownBlockType)always;
- (id)catchDispatchOn:(id)arg1 block:(id)arg2;
- (CDUnknownBlockType)catchDispatchOn;
- (id)catchOperationOn:(id)arg1 block:(id)arg2;
- (CDUnknownBlockType)catchOperationOn;
- (id)catchOnBackground:(id)arg1;
- (CDUnknownBlockType)catchOnBackground;
- (id)catchOnSame:(id)arg1;
- (CDUnknownBlockType)catchOnSame;
- (id)catch:(id)arg1;
- (CDUnknownBlockType)catch;
- (id)thenDispatchOn:(id)arg1 block:(id)arg2;
- (CDUnknownBlockType)thenDispatchOn;
- (id)thenOperationOn:(id)arg1 block:(id)arg2;
- (CDUnknownBlockType)thenOperationOn;
- (id)thenOnBackground:(id)arg1;
- (CDUnknownBlockType)thenOnBackground;
- (id)thenOnSame:(id)arg1;
- (CDUnknownBlockType)thenOnSame;
- (id)then:(id)arg1;
- (CDUnknownBlockType)then;
- (CDUnknownBlockType)finallyOn;
- (CDUnknownBlockType)alwaysOn;
- (CDUnknownBlockType)catchOn;
- (CDUnknownBlockType)thenOn;
- (id)chainOperation:(id)arg1 dispatch:(id)arg2 fulfill:(CDUnknownBlockType)arg3 reject:(CDUnknownBlockType)arg4;

@end

